1) very simple
Create an array containing temperatures
Assuming those temps are fahrenheit, convert them into
Celsius, and print them out. Make the conversion a function!

1a) for each of the temperatures, categorize that temperature
as either "a bit chilly", "quite pleasant", "far too hot" and
include that in the printout.

2) Create an *object* with an apply method, demonstrate that
the ObjectName(x) form invokes that apply method

3) Create a function that takes two positional arguments
with names, one has a default value, show that you can invoke
the function with or without the default value, and also
invoke with named argument passing

3a) optional, if you're done with 2 and 3 inside 15 minutes
create a variable length argument list and call that too.

4) write a function that returns the number of days in a given
month (arguments will be month and year). ensure you handle
leap years (a year is a leap year if it is exactly divisible by
400, or if it's divisible by 4 and NOT by 100. If the month is
meaningless, throw an exception.
Call the function with a number of month/year pairs some of which
are valid and others are not, handle the exception if a bad month
is presented.

5) Represent a Car, which has a number of seats and a color and
a Truck which has a payload (in pounds). Create some instances,
verify that these objects render themselves as text "nicely", and
that they provide equality comparison.

5a) You are coding for a logistics company, which plans to use
trucks and cars to move packages based on weight. The weight capacity
of a car is 170 lbs per available seat (don't forget the driver
must use one seat!). Build code using a match statement to indicate
whether a particular "vehicle" can carry a particular load.

6) Create a class called Date, representing a date. Provide it with
a constructor and validate that it is initialized validly
Support the validation in a companion object. Provide a factory in
the companion object. Write enough code using it to verify that it
behaves correctly.

6a) Create a subclass of Date called Holiday which is a "Date with a
name". Ensure that toString is good, prove that you get dynamic/polymorphic
behavior on the instance methods.

6b) Ensure Date is an immutable object, but create a "tomorrow" method
which *returns* a new Date representing the day following. Test it.

7) [see filereading.ReadAFile] Create a "concordance"--this is a table
of word frequencies in a body of text. Read the file (as an Iterable)
then convert lines into "words" (java.util.regex.Pattern and split, see
ReadAFile) and then count the words frequencies into a Map (use groupBy...)
Then print the table (optionally in descending order of frequency)

8) Similar to the map method that I created, create 1) a foreach method
and 2) create a flatmap method. Note both of these will require use of
both generic declarations and lambdas to use the capabilities.
